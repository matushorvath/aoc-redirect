AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: AoC Redirector

Parameters:
  Bucket:
    Type: String
    Description: Package bucket name
  Package:
    Type: String
    Description: Package file name
  Version:
    Type: String
    Description: Package version

Resources:
  # Function to process HTTP requests
  RedirectorUiFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - RedirectorUiTable
    Properties:
      FunctionName: !Sub "${AWS::StackName}_RedirectorUi"
      Description: !Ref Version
      CodeUri:
        Bucket: !Ref Bucket
        Key: !Ref Package
      Handler: src/lambda.handler
      Runtime: nodejs16.x
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref RedirectorUiTable
      Environment:
        Variables:
          AWS_SDK_LOAD_CONFIG: 1

  # Dynamo DB table to store all data
  RedirectorUiTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: name
          AttributeType: S
        - AttributeName: uuid
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: name
          KeyType: HASH
        - AttributeName: uuid
          KeyType: RANGE
      TableName: aoc-redirect

  # API Gateway to handle HTTP API
  RedirectorUiApi:
    DependsOn:
      - RedirectorUiFunction
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        openapi: "3.0.1"
        info:
          title: !Sub "${AWS::StackName}_Redirector"
          version: !Ref Version
        paths:
          /{year}/day/{day}:    # TODO this should ideally be POST
            get:
              security:
                - CustomAuthorizer: []
              x-amazon-apigateway-integration:
                uri: !Sub
                  "arn:aws:apigateway:${AWS::Region}:lambda:path\
                  /2015-03-31/functions/${RedirectorUiFunction.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /data:
            get:
              security:
                - CustomAuthorizer: []
              x-amazon-apigateway-integration:
                uri: !Sub
                  "arn:aws:apigateway:${AWS::Region}:lambda:path\
                  /2015-03-31/functions/${RedirectorUiFunction.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
        x-amazon-apigateway-binary-media-types:
          - "*/*"

  # Permission that allows API Gateway to call RedirectorUiFunction
  RedirectorUiIntegrationPerms:
    Type: AWS::Lambda::Permission
    DependsOn:
      - RedirectorUiFunction
      - RedirectorUiApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "${AWS::StackName}_RedirectorUi"
      Principal: apigateway.amazonaws.com
